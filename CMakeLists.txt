# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.0)
set(toolchainVersion 13_3_Rel1)
set(picotoolVersion 2.1.0)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico2 CACHE STRING "Board type")

cmake_minimum_required(VERSION 3.13)
# initialize the SDK based on PICO_SDK_PATH
# note: this must happen before project()
include(pico_sdk_import.cmake)
project(tamarin_firmware)

# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -ggdb")

pico_sdk_init()

add_executable(tamarin_firmware)

# target_compile_definitions(tamarin_firmware
#   PUBLIC PICO_UART_ENABLE_CRLF_SUPPORT=0
#   PUBLIC PICO_STDIO_ENABLE_CRLF_SUPPORT=0
#   PUBLIC PICO_STDIO_DEFAULT_CRLF=0
# )

target_compile_options(tamarin_firmware INTERFACE -DPICO_ENTER_USB_BOOT_ON_EXIT=1)


target_link_libraries(tamarin_firmware PRIVATE
    pico_stdlib
    tinyusb_device
    tinyusb_board
    pico_stdio
    hardware_i2c
    pico_multicore
    pico_time
    pico_sync
    hardware_pio
    pico_unique_id
)
pico_add_extra_outputs(tamarin_firmware)

add_subdirectory(src)

# enable usb output, disable uart output
# pico_enable_stdio_usb(tamarin_firmware 1)
# pico_enable_stdio_uart(tamarin_firmware 0)
